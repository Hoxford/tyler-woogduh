/*
 * ineedmd_power_modes.h
 *
 *  Created on: Jul 30, 2014
 *      Author: BrianS
 */

#ifndef INEEDMD_POWER_MODES_H_
#define INEEDMD_POWER_MODES_H_
/******************************************************************************
* includes ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
*public defines ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/




/******************************************************************************
*public variables /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
* external variables //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
*public enums /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

typedef enum PWR_CNTRL_REQUEST
{
  PC_REQUEST_NONE = 0,
  PC_REQUEST_TEMP,
  PC_REQUEST_BATT_VOLTAGE,
  PC_REQUEST_FORCE_SHUTDOWN,
  PC_REQUEST_FORCE_LOW_POWER,
  PC_REQUEST_FORCE_FULL_POWER,
  PC_REQUEST_LIMIT
}PWR_CNTRL_REQUEST;



//power control task state used to identify what state the task is in
typedef enum ePower_Control_Task_state
{
  PWR_CTRL_TASK_NONE,
  PWR_CTRL_TASK_IDLE,
  PWR_CTRL_TASK_LIMIT
}ePower_Control_state;

/******************************************************************************
*public structures ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

typedef struct tPower_control_request
{
  PWR_CNTRL_REQUEST eRequest;
  uint32_t * uiThermal_Temp;
  uint32_t * uiBatt_Voltage;
  void (* vBatt_Critical_Notify)(uint32_t uiBatt_Voltage, bool bDo_Mandatory_Shutdown);
  void (* vTemp_Critical_Notify)(uint32_t uiThermal_Temp, bool bDo_Mandatory_Shutdown);
}tPower_control_request;

/******************************************************************************
* external functions //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
* public functions ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/
int uiPower_Control_Get_Supply_Voltage(void);
ePower_Control_state ePower_Control_Get_Task_State(void);
ERROR_CODE ePower_Control_Request_params_init(tPower_control_request * tParams);
ERROR_CODE ePower_Control_Request(tPower_control_request * tRequest);

//void shut_it_all_down(void);
//void sleep_for_tenths(int);
//void ineedmd_sleep(void);
//void hold_until_short_removed(void);

#endif /* INEEDMD_POWER_MODES_H_ */

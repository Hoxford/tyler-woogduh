/******************************************************************************
*
* ineedmd_USB.h - USB include file
* Copyright (c) notice
*
******************************************************************************/
#ifndef __INEEDMD_USB_H__
#define __INEEDMD_USB_H__
/******************************************************************************
* includes ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
*public defines ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
*public variables /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
* external variables //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
*public enums /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/
//eUSB_request_ID enum that will be part of the USB request. ID's denote specific usb request to perform
typedef enum eUSB_request_ID
{
  USB_REQUEST_NONE,
  USB_REQUEST_REGISTER_CONN_CALLBACK,   //register a connection notification callback function
  USB_REQUEST_UNREGISTER_CONN_CALLBACK, //un-register a connection notification callback function
  USB_REQUEST_FORCE_ENABLE,             //force the usb peripheral on
  USB_REQUEST_FORCE_DISABLE,            //force the usb peripheral off
  USB_REQUEST_FORCE_DISCONNECT,         //force the USB to disconnect from an external host
  USB_REQUEST_RECONNECT,                //request the USB to attempt reconnect with an external host
  USB_REQUEST_LIMIT
}eUSB_request_ID;

//eUSB_connection_state enum used to identify the current connection state of the USB task
typedef enum eUSB_Conn_State
{
  USB_CONN_NONE,
  USB_CONN_PHYSICAL,
  USB_CONN_DATA,
  USB_CONN_LIMIT
}eUSB_Conn_State;

/******************************************************************************
*public structures ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/
//tUSB_req USB request structure
typedef struct tUSB_req
{
  eUSB_request_ID eRequest;
  void (* vUSB_connection_callback) (bool bUSB_Physical_connection, bool bUSB_Data_connection);
}tUSB_req;

/******************************************************************************
* external functions //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
* public functions ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/
ERROR_CODE      eUSB_request_params_init        (tUSB_req * tParams );
ERROR_CODE      eUSB_request                    (tUSB_req * tRequest);
eUSB_Conn_State eUSB_get_connection_task_state  (void);
#endif //__INEEDMD_USB_H__

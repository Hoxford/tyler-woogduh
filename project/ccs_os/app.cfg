var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Watchdog = xdc.useModule('ti.drivers.Watchdog');
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
var GPIO = xdc.useModule('ti.drivers.GPIO');
var UART = xdc.useModule('ti.drivers.UART');
var SPI = xdc.useModule('ti.drivers.SPI');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var I2C = xdc.useModule('ti.drivers.I2C');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x1000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_NonInstrumented;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x400;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 512;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

SysMin.flushAtExit = true;

Watchdog.libType = Watchdog.LibType_NonInstrumented;
GPIO.libType = GPIO.LibType_NonInstrumented;
UART.libType = UART.LibType_NonInstrumented;
BIOS.assertsEnabled = false;
BIOS.logsEnabled = false;
BIOS.customCCOpts = "--endian=little -mv7M4 --abi=eabi --float_support=fpv4spd16 -q -ms --opt_for_speed=2  --program_level_compile -o3 -g --optimize_with_debug";
SPI.libType = SPI.LibType_NonInstrumented;
var mailbox0Params = new Mailbox.Params();
mailbox0Params.instance.name = "tTIRTOS_Radio_mailbox";
Program.global.tTIRTOS_Radio_mailbox = Mailbox.create(288, 3, mailbox0Params);
var mailbox1Params = new Mailbox.Params();
mailbox1Params.instance.name = "tUI_mailbox";
mailbox1Params.buf = null;
mailbox1Params.bufSize = 0;
Program.global.tUI_mailbox = Mailbox.create(8, 6, mailbox1Params);
I2C.libType = I2C.LibType_NonInstrumented;
var queue0Params = new Queue.Params();
queue0Params.instance.name = "tUI_queue";
Program.global.tUI_queue = Queue.create(queue0Params);
var timer1Params = new Timer.Params();
timer1Params.instance.name = "tUI_power_led_timer";
timer1Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer1Params.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
Program.global.tUI_power_led_timer = Timer.create(-1, "&vIneedmd_UI_Power_led_timer_INT_Service", timer1Params);
var timer2Params = new Timer.Params();
timer2Params.instance.name = "tUI_heart_led_timer";
timer2Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer2Params.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
Program.global.tUI_heart_led_timer = Timer.create(-1, "&vIneedmd_UI_Heart_led_timer_INT_Service", timer2Params);
var timer3Params = new Timer.Params();
timer3Params.instance.name = "tUI_comms_led_timer";
timer3Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer3Params.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
Program.global.tUI_comms_led_timer = Timer.create(-1, "&vIneedmd_UI_Comms_led_timer_INT_Service", timer3Params);
Idle.idleFxns[0] = "&vIdle_Task";
var task0Params = new Task.Params();
task0Params.instance.name = "Ineedmd_UI_task";
task0Params.priority = 2;
task0Params.stackSize = 512;
Program.global.Ineedmd_UI_task = Task.create("&vIneedmd_UI_task", task0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "IneedMD_radio_task";
task1Params.priority = 14;
task1Params.stackSize = 4096;
Program.global.IneedMD_radio_task = Task.create("&vIneedMD_radio_task", task1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "Ineedmd_command_task";
task2Params.priority = 4;
task2Params.stackSize = 3072;
Program.global.Ineedmd_command_task = Task.create("&vIneedmd_command_task", task2Params);
var mailbox2Params = new Mailbox.Params();
mailbox2Params.instance.name = "tTIRTOS_cmnd_protocol_mailbox";
Program.global.tTIRTOS_cmnd_protocol_mailbox = Mailbox.create(136, 3, mailbox2Params);

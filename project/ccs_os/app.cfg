var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Watchdog = xdc.useModule('ti.drivers.Watchdog');
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
var GPIO = xdc.useModule('ti.drivers.GPIO');
var UART = xdc.useModule('ti.drivers.UART');
var SPI = xdc.useModule('ti.drivers.SPI');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var I2C = xdc.useModule('ti.drivers.I2C');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var SDSPI = xdc.useModule('ti.drivers.SDSPI');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 3072;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_NonInstrumented;

/* System stack size (used by ISRs and Swis) */
Program.stack = 2048;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 512;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

SysMin.flushAtExit = true;

Watchdog.libType = Watchdog.LibType_NonInstrumented;
GPIO.libType = GPIO.LibType_NonInstrumented;
UART.libType = UART.LibType_NonInstrumented;
BIOS.assertsEnabled = false;
BIOS.logsEnabled = false;
BIOS.customCCOpts = "--endian=little -mv7M4 --abi=eabi --float_support=fpv4spd16 -q -ms --opt_for_speed=2  --program_level_compile -o3 -g --optimize_with_debug";
SPI.libType = SPI.LibType_NonInstrumented;
var mailbox0Params = new Mailbox.Params();
mailbox0Params.instance.name = "tTIRTOS_Radio_mailbox";
Program.global.tTIRTOS_Radio_mailbox = Mailbox.create(268, 4, mailbox0Params);
var mailbox1Params = new Mailbox.Params();
mailbox1Params.instance.name = "tUI_mailbox";
mailbox1Params.buf = null;
mailbox1Params.bufSize = 0;
Program.global.tUI_mailbox = Mailbox.create(8, 18, mailbox1Params);
I2C.libType = I2C.LibType_NonInstrumented;
var queue0Params = new Queue.Params();
queue0Params.instance.name = "tUI_queue";
Program.global.tUI_queue = Queue.create(queue0Params);
Idle.idleFxns[0] = "&vIdle_Task";
var mailbox2Params = new Mailbox.Params();
mailbox2Params.instance.name = "tTIRTOS_cmnd_protocol_mailbox";
Program.global.tTIRTOS_cmnd_protocol_mailbox = Mailbox.create(136, 3, mailbox2Params);
SDSPI.libType = SDSPI.LibType_NonInstrumented;
Task.idleTaskStackSize = 512;
var task4Params = new Task.Params();
task4Params.instance.name = "USB_task";
task4Params.priority = 14;
task4Params.stackSize = 1024;
Program.global.USB_task = Task.create("&vUSB_task", task4Params);
var task1Params = new Task.Params();
task1Params.instance.name = "Ineedmd_command_task";
task1Params.priority = 4;
Program.global.Ineedmd_command_task = Task.create("&vIneedmd_command_task", task1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "IneedMD_radio_task";
task2Params.priority = 13;
task2Params.stackSize = 2048;
Program.global.IneedMD_radio_task = Task.create("&vIneedMD_radio_task", task2Params);
BIOS.runtimeCreatesEnabled = true;
var task3Params = new Task.Params();
task3Params.instance.name = "Ineedmd_UI_task";
task3Params.priority = 3;
task3Params.stackSize = 768;
Program.global.Ineedmd_UI_task = Task.create("&vIneedmd_UI_task", task3Params);
var task4Params0 = new Task.Params();
task4Params0.instance.name = "Ineedmd_waveform_task";
task4Params0.priority = 12;
task4Params0.stackSize = 1280;
Program.global.Ineedmd_waveform_task = Task.create("&vIneedmd_waveform_task", task4Params0);
var mailbox3Params = new Mailbox.Params();
mailbox3Params.instance.name = "tUSB_mailbox";
Program.global.tUSB_mailbox = Mailbox.create(16, 2, mailbox3Params);
var mailbox4Params = new Mailbox.Params();
mailbox4Params.instance.name = "tEKG_mailbox";
Program.global.tEKG_mailbox = Mailbox.create(1, 3, mailbox4Params);
var clock0Params = new Clock.Params();
clock0Params.instance.name = "tUI_comms_led_timer";
clock0Params.period = 0;
clock0Params.startFlag = false;
Program.global.tUI_comms_led_timer = Clock.create("&vIneedmd_UI_Comms_led_timer_INT_Service", 1, clock0Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "tUI_heart_led_timer";
Program.global.tUI_heart_led_timer = Clock.create("&vIneedmd_UI_Heart_led_timer_INT_Service", 1, clock1Params);
var clock2Params = new Clock.Params();
clock2Params.instance.name = "tUI_power_led_timer";
Program.global.tUI_power_led_timer = Clock.create("&vIneedmd_UI_Power_led_timer_INT_Service", 1, clock2Params);
var clock3Params = new Clock.Params();
clock3Params.instance.name = "tUI_sounder_timer";
Program.global.tUI_sounder_timer = Clock.create("&vIneedmd_UI_Sounder_timer_INT_Service", 1, clock3Params);
var timer0Params = new Timer.Params();
timer0Params.instance.name = "tSounder_pwm_timer";
timer0Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
Program.global.tSounder_pwm_timer = Timer.create(-1, "&vSounder_timer_INT_Service", timer0Params);
var clock4Params = new Clock.Params();
clock4Params.instance.name = "tRadio_conn_timeout_timer";
Program.global.tRadio_conn_timeout_timer = Clock.create("&vRadio_conn_timout_int_service", 1, clock4Params);
var task5Params = new Task.Params();
task5Params.instance.name = "Power_Control_task";
task5Params.priority = 2;
task5Params.stackSize = 1024;
Program.global.Power_Control_task = Task.create("&vPower_Control_task", task5Params);
var mailbox5Params = new Mailbox.Params();
mailbox5Params.instance.name = "tPC_mailbox";
Program.global.tPC_mailbox = Mailbox.create(1, 3, mailbox5Params);
var clock5Params = new Clock.Params();
clock5Params.instance.name = "tPower_Control_shutdown_timer";
Program.global.tPower_Control_shutdown_timer = Clock.create("&vPower_Control_shtdwn_timeout_int_service", 1, clock5Params);
var timer1Params0 = new Timer.Params();
timer1Params0.instance.name = "tWaveform_test_pattern_timer";
timer1Params0.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer1Params0.period = 5000;
Program.global.tWaveform_test_pattern_timer = Timer.create(-1, "&vWaveform_timer_INT_Service", timer1Params0);
var clock6Params = new Clock.Params();
clock6Params.instance.name = "tADC_read_temp_clock";
clock6Params.period = 60000;
Program.global.tADC_read_temp_clock = Clock.create("&vADC_temperature_read_int_service", 1, clock6Params);
var clock7Params = new Clock.Params();
clock7Params.instance.name = "tADC_read_volt_clock";
clock7Params.period = 5000;
Program.global.tADC_read_volt_clock = Clock.create("&vADC_batt_volt_read_int_service", 1, clock7Params);
var clock8Params = new Clock.Params();
clock8Params.instance.name = "tProto_Cmndr_status_clock";
clock8Params.period = 10000;
Program.global.tProto_Cmndr_status_clock = Clock.create("&vProto_Commander_UI_Status_INT_service", 10000, clock8Params);
var clock9Params = new Clock.Params();
clock9Params.instance.name = "tUI_power_led_status_check_timer";
clock9Params.period = 0;
clock9Params.startFlag = false;
var clock9Params = new Clock.Params();
clock9Params.instance.name = "tUI_power_led_status_check_timer";
clock9Params.period = 5000;
clock9Params.startFlag = true;
Program.global.tUI_power_led_status_check_timer = Clock.create("&vUI_power_led_status_check_timer", 30000, clock9Params);
var clock10Params = new Clock.Params();
clock10Params.instance.name = "tRadio_rcv_timeout";
clock10Params.period = 0;
Program.global.tRadio_rcv_timeout = Clock.create("&vRadio_rcv_timeout_service_INT", 5000, clock10Params);
Task.enableIdleTask = true;
var clock11Params = new Clock.Params();
clock11Params.instance.name = "tProto_Cmndr_RTC_clock";
clock11Params.period = 1000;
clock11Params.startFlag = true;
Program.global.tProto_Cmndr_RTC_clock = Clock.create("&vProto_Cmndr_RTC_clock_INT_service", 5000, clock11Params);
var clock12Params = new Clock.Params();
clock12Params.instance.name = "tWaveform_leads_off_timer";
clock12Params.period = 1000;
clock12Params.arg = null;
Program.global.tWaveform_leads_off_timer = Clock.create("&vWaveform_leads_off_INT_service", null, clock12Params);
